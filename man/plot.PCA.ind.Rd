% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.DDD.R
\name{plot.PCA.ind}
\alias{plot.PCA.ind}
\title{Make principal component analysis (PCA) plot of individual samples}
\usage{
\method{plot}{PCA.ind}(data2pca, dim1 = "PC1", dim2 = "PC2", groups,
  plot.title = "PCA plot", ellipse.type = c("none", "ellipse",
  "polygon"), add.label = T, adj.label = F)
}
\arguments{
\item{data2pca}{a matrix/data.frame to make the PCA plot of which the rows are defined individuals to plot.}

\item{dim1, dim2}{characters to indicate the PCs to plot on x-axis (dim1) and y-axis (dim2), e.g. \code{dim1='PC1'},
\code{dim2='PC2'}; \code{dim1='PC2'}, \code{dim2='PC3'}; etc.}

\item{groups}{a vector of characters to specify the groups of conditions. The scatter points will be coloured
according to provided group information.}

\item{plot.title}{the title to show on the plot.}

\item{ellipse.type}{add colour shadow to the sample groups. Options are: "none","ellipse" and "polygon".}

\item{add.label}{logical, whether to add sample labels to the scatter points.}

\item{adj.label}{logical, whether to adjust the position of sample labels to avoid overlapping.}
}
\value{
a plot in \code{ggplot} format.
}
\description{
Make principal component analysis (PCA) plot of individual samples
}
\examples{
load('data/txi_genes.RData')
load('data/samples.RData')
load('data/target_high.RData')
genes_counts <- txi_genes$counts[target_high$genes_high,][1:100,]
samples <- samples[,c('condition','brep','srep')]
exp.data <- list(genes_counts=genes_counts,samples=samples)
save(exp.data,file='data/exp.data.RData')
samples <- exp.data$samples

##------> sum sequencing replicates
genes_counts <- exp.data$genes_counts
idx <- paste0(samples$condition,'_',samples$brep)
y <- sumarrays(genes_counts,group = idx)

##------> update sample information after sum
samples <- samples[samples$srep==samples$srep[1],]

##------> normalisation
dge <- DGEList(counts=y)
dge <- calcNormFactors(dge)
data2pca <- t(counts2CPM(obj = dge,Log = T))

##------> plot PCA
groups <- samples$brep
plot.PCA.ind(data2pca = data2pca,dim1 = 'PC1',dim2 = 'PC2',
             groups = groups,ellipse.type='polygon')

##------> remove batch effects
y.new <- remove.batch(read.counts = y,
                      condition = samples$condition,
                      method = 'RUVg')

##------> normalisation and plot PCA again
dge <- DGEList(counts=genes_batch$normalizedCounts)
dge <- suppressWarnings(calcNormFactors(dge))
data2pca <- t(counts2CPM(obj = dge,Log = T))
plot.PCA.ind(data2pca = data2pca,dim1 = 'PC1',dim2 = 'PC2',
             groups = groups,ellipse.type='polygon')
}
